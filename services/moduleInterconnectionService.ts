/**
 * üîó SERVICE D'INTERCONNEXION DES MODULES
 * Assure la communication et la synchronisation entre tous les modules
 */

import { supabase } from './supabaseService';
import { Project, TimeLog, Objective, Invoice, KnowledgeArticle, Job, Course } from '../types';

class ModuleInterconnectionService {
  /**
   * Mettre √† jour les statistiques d'un projet apr√®s ajout de time log
   */
  async updateProjectStatsAfterTimeLog(projectId: string): Promise<void> {
    try {
      console.log('üîÑ Mise √† jour statistiques projet apr√®s time log...');
      
      // R√©cup√©rer tous les time logs du projet
      const { data: timeLogs, error } = await supabase
        .from('time_logs')
        .select('duration, status')
        .eq('project_id', projectId);

      if (error) throw error;

      // Calculer le temps total
      const totalTime = timeLogs?.reduce((sum, log) => sum + (log.duration || 0), 0) || 0;
      
      // Calculer le pourcentage de completion bas√© sur les time logs
      const completedLogs = timeLogs?.filter(log => log.status === 'completed').length || 0;
      const totalLogs = timeLogs?.length || 0;
      const completionPercentage = totalLogs > 0 ? Math.round((completedLogs / totalLogs) * 100) : 0;

      // Mettre √† jour le projet
      await supabase
        .from('projects')
        .update({
          total_time: totalTime,
          progress: completionPercentage,
          updated_at: new Date().toISOString()
        })
        .eq('id', projectId);

      console.log('‚úÖ Statistiques projet mises √† jour');
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour statistiques projet:', error);
    }
  }

  /**
   * Mettre √† jour les statistiques d'un objectif apr√®s ajout de time log
   */
  async updateObjectiveStatsAfterTimeLog(objectiveId: string): Promise<void> {
    try {
      console.log('üîÑ Mise √† jour statistiques objectif apr√®s time log...');
      
      // R√©cup√©rer les time logs li√©s √† l'objectif (via les t√¢ches)
      const { data: timeLogs, error } = await supabase
        .from('time_logs')
        .select('duration, status')
        .eq('objective_id', objectiveId);

      if (error) throw error;

      // Calculer le temps total et la progression
      const totalTime = timeLogs?.reduce((sum, log) => sum + (log.duration || 0), 0) || 0;
      const completedLogs = timeLogs?.filter(log => log.status === 'completed').length || 0;
      const totalLogs = timeLogs?.length || 0;
      const progress = totalLogs > 0 ? Math.round((completedLogs / totalLogs) * 100) : 0;

      // Mettre √† jour l'objectif
      await supabase
        .from('objectives')
        .update({
          progress,
          updated_at: new Date().toISOString()
        })
        .eq('id', objectiveId);

      console.log('‚úÖ Statistiques objectif mises √† jour');
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour statistiques objectif:', error);
    }
  }

  /**
   * Cr√©er une notification pour les assignations d'√©quipe
   */
  async notifyTeamAssignment(userId: string, entityType: 'project' | 'objective', entityName: string): Promise<void> {
    try {
      console.log('üîÑ Cr√©ation notification assignation √©quipe...');
      
      await supabase
        .from('notifications')
        .insert([{
          user_id: userId,
          message: `Vous avez √©t√© assign√©(e) √† ${entityType === 'project' ? 'le projet' : 'l\'objectif'} "${entityName}"`,
          type: 'team_assignment',
          entity_id: entityType,
          read: false
        }]);

      console.log('‚úÖ Notification cr√©√©e');
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation notification:', error);
    }
  }

  /**
   * Synchroniser les donn√©es entre modules
   */
  async syncModuleData(moduleType: string, action: string, data: any): Promise<void> {
    try {
      console.log(`üîÑ Synchronisation ${moduleType} - ${action}...`);
      
      switch (moduleType) {
        case 'time_tracking':
          if (action === 'create' && data.projectId) {
            await this.updateProjectStatsAfterTimeLog(data.projectId);
          }
          break;
          
        case 'projects':
          if (action === 'update' && data.team) {
            // Notifier les nouveaux membres d'√©quipe
            for (const memberId of data.team) {
              await this.notifyTeamAssignment(memberId, 'project', data.name);
            }
          }
          break;
          
        case 'objectives':
          if (action === 'update' && data.team) {
            // Notifier les nouveaux membres d'√©quipe
            for (const memberId of data.team) {
              await this.notifyTeamAssignment(memberId, 'objective', data.title);
            }
          }
          break;
      }
      
      console.log('‚úÖ Synchronisation termin√©e');
    } catch (error) {
      console.error('‚ùå Erreur synchronisation:', error);
    }
  }

  /**
   * R√©cup√©rer les donn√©es li√©es pour un module
   */
  async getRelatedData(entityType: string, entityId: string): Promise<any> {
    try {
      console.log(`üîÑ R√©cup√©ration donn√©es li√©es ${entityType}...`);
      
      switch (entityType) {
        case 'project':
          const { data: projectData } = await supabase
            .from('projects')
            .select(`
              *,
              time_logs:time_logs(*),
              objectives:objectives(*)
            `)
            .eq('id', entityId)
            .single();
          return projectData;
          
        case 'objective':
          const { data: objectiveData } = await supabase
            .from('objectives')
            .select(`
              *,
              time_logs:time_logs(*)
            `)
            .eq('id', entityId)
            .single();
          return objectiveData;
          
        default:
          return null;
      }
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration donn√©es li√©es:', error);
      return null;
    }
  }

  /**
   * Mettre √† jour les m√©triques globales
   */
  async updateGlobalMetrics(): Promise<void> {
    try {
      console.log('üîÑ Mise √† jour m√©triques globales...');
      
      // Compter les projets actifs
      const { count: activeProjects } = await supabase
        .from('projects')
        .select('*', { count: 'exact', head: true })
        .eq('status', 'In Progress');
      
      // Compter les objectifs en cours
      const { count: activeObjectives } = await supabase
        .from('objectives')
        .select('*', { count: 'exact', head: true })
        .eq('status', 'In Progress');
      
      // Calculer le temps total travaill√©
      const { data: timeLogs } = await supabase
        .from('time_logs')
        .select('duration');
      
      const totalWorkTime = timeLogs?.reduce((sum, log) => sum + (log.duration || 0), 0) || 0;
      
      console.log('‚úÖ M√©triques globales mises √† jour:', {
        activeProjects,
        activeObjectives,
        totalWorkTime
      });
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour m√©triques:', error);
    }
  }
}

export const moduleInterconnectionService = new ModuleInterconnectionService();
