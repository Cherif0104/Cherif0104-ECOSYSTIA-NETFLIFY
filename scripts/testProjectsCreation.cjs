const { createClient } = require('@supabase/supabase-js');
const { supabaseConfig } = require('../config/supabase.cjs');

const supabase = createClient(supabaseConfig.url, supabaseConfig.anonKey);

async function testProjectsCreation() {
    console.log("üöÄ TEST DE CR√âATION DE PROJETS");
    console.log("===============================");

    try {
        // Test 1: V√©rifier la connexion
        console.log("\nüìã Test 1: V√©rification de la connexion");
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        
        if (authError) {
            console.log(`‚ùå Erreur d'authentification: ${authError.message}`);
            console.log("üí° Connectez-vous d'abord avec un utilisateur SENEGEL");
            return;
        }
        
        if (!user) {
            console.log("‚ùå Aucun utilisateur connect√©");
            console.log("üí° Connectez-vous d'abord avec un utilisateur SENEGEL");
            return;
        }
        
        console.log(`‚úÖ Utilisateur connect√©: ${user.email}`);

        // Test 2: Cr√©er un projet de test
        console.log("\nüìù Test 2: Cr√©ation d'un projet de test");
        const testProject = {
            name: 'Test Project RLS',
            description: 'Projet de test pour v√©rifier les politiques RLS',
            status: 'active',
            priority: 'medium',
            start_date: new Date().toISOString().split('T')[0],
            end_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
            progress: 0,
            budget: 100000,
            owner_id: user.id,
            team_members: [user.id]
        };

        const { data: projectData, error: projectError } = await supabase
            .from('projects')
            .insert([testProject])
            .select()
            .single();

        if (projectError) {
            console.log(`‚ùå Erreur cr√©ation projet: ${projectError.message}`);
            console.log(`   Code: ${projectError.code}`);
            console.log(`   D√©tails: ${projectError.details}`);
            return;
        }

        console.log(`‚úÖ Projet cr√©√© avec succ√®s: ${projectData.id}`);
        console.log(`   Nom: ${projectData.name}`);
        console.log(`   Propri√©taire: ${projectData.owner_id}`);

        // Test 3: R√©cup√©rer le projet cr√©√©
        console.log("\nüìñ Test 3: R√©cup√©ration du projet cr√©√©");
        const { data: retrievedProject, error: retrieveError } = await supabase
            .from('projects')
            .select('*')
            .eq('id', projectData.id)
            .single();

        if (retrieveError) {
            console.log(`‚ùå Erreur r√©cup√©ration projet: ${retrieveError.message}`);
        } else {
            console.log(`‚úÖ Projet r√©cup√©r√©: ${retrievedProject.name}`);
        }

        // Test 4: Mettre √† jour le projet
        console.log("\n‚úèÔ∏è Test 4: Mise √† jour du projet");
        const { data: updatedProject, error: updateError } = await supabase
            .from('projects')
            .update({ 
                progress: 50,
                updated_at: new Date().toISOString()
            })
            .eq('id', projectData.id)
            .select()
            .single();

        if (updateError) {
            console.log(`‚ùå Erreur mise √† jour projet: ${updateError.message}`);
        } else {
            console.log(`‚úÖ Projet mis √† jour: ${updatedProject.progress}% de progression`);
        }

        // Test 5: Supprimer le projet de test
        console.log("\nüóëÔ∏è Test 5: Suppression du projet de test");
        const { error: deleteError } = await supabase
            .from('projects')
            .delete()
            .eq('id', projectData.id);

        if (deleteError) {
            console.log(`‚ùå Erreur suppression projet: ${deleteError.message}`);
        } else {
            console.log(`‚úÖ Projet supprim√© avec succ√®s`);
        }

        console.log("\nüéâ TOUS LES TESTS SONT PASS√âS !");
        console.log("Les politiques RLS pour les projets fonctionnent correctement.");

    } catch (error) {
        console.error("‚ùå Erreur inattendue:", error.message);
    }
}

testProjectsCreation();
