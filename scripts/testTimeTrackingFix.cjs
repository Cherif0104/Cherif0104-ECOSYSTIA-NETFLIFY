const { createClient } = require('@supabase/supabase-js');
const { supabaseConfig } = require('../config/supabase.cjs');

const supabase = createClient(supabaseConfig.url, supabaseConfig.serviceRoleKey);

async function testTimeTrackingFix() {
    console.log("üöÄ TEST DE CORRECTION TIME TRACKING");
    console.log("===================================");

    try {
        // Test 1: V√©rifier la connexion
        console.log("\nüìã Test 1: V√©rification de la connexion");
        console.log("‚úÖ Connexion avec la cl√© de service");

        // Test 2: R√©cup√©rer un utilisateur et un projet existants
        console.log("\nüë§ Test 2: R√©cup√©ration des donn√©es de test");
        const { data: users, error: usersError } = await supabase
            .from('users')
            .select('id, email, first_name, last_name')
            .limit(1);

        if (usersError || !users || users.length === 0) {
            throw new Error('Aucun utilisateur trouv√©');
        }

        const { data: projects, error: projectsError } = await supabase
            .from('projects')
            .select('id, name')
            .limit(1);

        if (projectsError || !projects || projects.length === 0) {
            throw new Error('Aucun projet trouv√©');
        }

        const testUser = users[0];
        const testProject = projects[0];
        
        console.log(`‚úÖ Utilisateur trouv√©: ${testUser.first_name} ${testUser.last_name} (${testUser.email})`);
        console.log(`‚úÖ Projet trouv√©: ${testProject.name}`);

        // Test 3: Cr√©er un time log de test
        console.log("\n‚è∞ Test 3: Cr√©ation d'un time log de test");
        const testTimeLog = {
            user_id: testUser.id,
            project_id: testProject.id,
            description: 'Test Time Tracking Fix',
            hours: 1.0,
            date: new Date().toISOString().split('T')[0]
        };

        const { data: timeLogData, error: timeLogError } = await supabase
            .from('time_logs')
            .insert([testTimeLog])
            .select()
            .single();

        if (timeLogError) {
            console.log(`‚ùå Erreur cr√©ation time log: ${timeLogError.message}`);
            console.log(`   Code: ${timeLogError.code}`);
            console.log(`   D√©tails: ${timeLogError.details}`);
            return;
        }

        console.log(`‚úÖ Time log cr√©√© avec succ√®s: ${timeLogData.id}`);
        console.log(`   Description: ${timeLogData.description}`);
        console.log(`   Heures: ${timeLogData.hours}`);

        // Test 4: R√©cup√©rer le time log cr√©√©
        console.log("\nüìñ Test 4: R√©cup√©ration du time log cr√©√©");
        const { data: retrievedTimeLog, error: retrieveError } = await supabase
            .from('time_logs')
            .select('*')
            .eq('id', timeLogData.id)
            .single();

        if (retrieveError) {
            console.log(`‚ùå Erreur r√©cup√©ration time log: ${retrieveError.message}`);
        } else {
            console.log(`‚úÖ Time log r√©cup√©r√©: ${retrievedTimeLog.description}`);
        }

        // Test 5: Mettre √† jour le time log
        console.log("\n‚úèÔ∏è Test 5: Mise √† jour du time log");
        const { data: updatedTimeLog, error: updateError } = await supabase
            .from('time_logs')
            .update({ 
                hours: 1.5,
                updated_at: new Date().toISOString()
            })
            .eq('id', timeLogData.id)
            .select()
            .single();

        if (updateError) {
            console.log(`‚ùå Erreur mise √† jour time log: ${updateError.message}`);
        } else {
            console.log(`‚úÖ Time log mis √† jour: ${updatedTimeLog.hours} heures`);
        }

        // Test 6: Supprimer le time log de test
        console.log("\nüóëÔ∏è Test 6: Suppression du time log de test");
        const { error: deleteError } = await supabase
            .from('time_logs')
            .delete()
            .eq('id', timeLogData.id);

        if (deleteError) {
            console.log(`‚ùå Erreur suppression time log: ${deleteError.message}`);
        } else {
            console.log(`‚úÖ Time log supprim√© avec succ√®s`);
        }

        console.log("\nüéâ TOUS LES TESTS SONT PASS√âS !");
        console.log("Le Time Tracking fonctionne maintenant correctement.");
        console.log("Le bouton 'D√©marrer' devrait maintenant √™tre actif !");

    } catch (error) {
        console.error("‚ùå Erreur inattendue:", error.message);
    }
}

testTimeTrackingFix();
