const { createClient } = require('@supabase/supabase-js');
const { supabaseConfig } = require('../config/supabase.cjs');

const supabase = createClient(supabaseConfig.url, supabaseConfig.anonKey);

async function debugUserData() {
    console.log("üîç DEBUG DONN√âES UTILISATEUR");
    console.log("============================\n");

    try {
        // 1. R√©cup√©rer tous les utilisateurs
        console.log("1Ô∏è‚É£ Tous les utilisateurs:");
        const { data: allUsers, error: usersError } = await supabase
            .from('users')
            .select('id, first_name, last_name, email')
            .order('created_at', { ascending: false });

        if (usersError) {
            console.error("‚ùå Erreur utilisateurs:", usersError.message);
            return;
        }

        console.log(`‚úÖ ${allUsers.length} utilisateurs trouv√©s:`);
        allUsers.forEach((user, index) => {
            console.log(`   ${index + 1}. ${user.first_name} ${user.last_name} (${user.email}) - ID: ${user.id}`);
        });

        // 2. Chercher l'utilisateur CONTACT
        console.log("\n2Ô∏è‚É£ Recherche utilisateur CONTACT:");
        const contactUser = allUsers.find(user => 
            user.first_name === 'CONTACT' || 
            user.email === 'contact@senegel.org'
        );

        if (contactUser) {
            console.log(`‚úÖ Utilisateur CONTACT trouv√©: ${contactUser.id}`);
        } else {
            console.log("‚ùå Utilisateur CONTACT non trouv√©");
        }

        // 3. V√©rifier les demandes de cong√©
        console.log("\n3Ô∏è‚É£ Toutes les demandes de cong√©:");
        const { data: allLeaveRequests, error: leaveError } = await supabase
            .from('leave_requests')
            .select('*')
            .order('created_at', { ascending: false });

        if (leaveError) {
            console.error("‚ùå Erreur demandes:", leaveError.message);
        } else {
            console.log(`‚úÖ ${allLeaveRequests.length} demandes trouv√©es:`);
            allLeaveRequests.forEach((request, index) => {
                const user = allUsers.find(u => u.id === request.employee_id);
                console.log(`   ${index + 1}. ID: ${request.id}`);
                console.log(`      - Employ√© ID: ${request.employee_id}`);
                console.log(`      - Employ√©: ${user ? `${user.first_name} ${user.last_name}` : 'Inconnu'}`);
                console.log(`      - Type: ${request.leave_type}`);
                console.log(`      - Statut: ${request.status}`);
                console.log(`      - Cr√©√©: ${request.created_at}`);
                console.log('');
            });
        }

        // 4. Tester la requ√™te avec l'ID de CONTACT
        if (contactUser) {
            console.log("\n4Ô∏è‚É£ Test requ√™te avec ID CONTACT:");
            const { data: contactRequests, error: contactError } = await supabase
                .from('leave_requests')
                .select('*')
                .eq('employee_id', contactUser.id);

            if (contactError) {
                console.error("‚ùå Erreur requ√™te CONTACT:", contactError.message);
            } else {
                console.log(`‚úÖ ${contactRequests.length} demandes pour CONTACT`);
            }
        }

    } catch (error) {
        console.error(`‚ùå Erreur: ${error.message}`);
    }
}

debugUserData();
