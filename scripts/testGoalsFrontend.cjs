const { createClient } = require('@supabase/supabase-js');
const { supabaseConfig } = require('../config/supabase.cjs');

const supabase = createClient(supabaseConfig.url, supabaseConfig.anonKey);

async function testGoalsFrontend() {
    console.log("üîç TEST FRONTEND - MODULE GOALS");
    console.log("===============================\n");

    try {
        // Test 1: Cr√©er un objectif de test
        console.log("1Ô∏è‚É£ Cr√©ation d'un objectif de test...");
        const testObjective = {
            title: "Test Frontend Persistance",
            description: "Objectif cr√©√© pour tester la persistance frontend",
            status: "In Progress",
            priority: "High",
            start_date: "2024-01-01",
            end_date: "2024-12-31",
            progress: 50,
            owner_id: "00000000-0000-0000-0000-000000000000",
            category: "Test Frontend",
            owner_name: "Test User Frontend",
            team_members: ["user1", "user2", "user3"],
            quarter: "Q4",
            year: 2024
        };

        const { data: createdObjective, error: createError } = await supabase
            .from('objectives')
            .insert([testObjective])
            .select()
            .single();

        if (createError) throw createError;

        console.log("‚úÖ Objectif cr√©√© avec succ√®s:");
        console.log(`   - ID: ${createdObjective.id}`);
        console.log(`   - Titre: ${createdObjective.title}`);
        console.log(`   - Cat√©gorie: ${createdObjective.category}`);
        console.log(`   - Propri√©taire: ${createdObjective.owner_name}`);
        console.log(`   - √âquipe: ${JSON.stringify(createdObjective.team_members)}`);

        // Test 2: R√©cup√©rer tous les objectifs (comme le fait le frontend)
        console.log("\n2Ô∏è‚É£ R√©cup√©ration de tous les objectifs...");
        const { data: allObjectives, error: retrieveError } = await supabase
            .from('objectives')
            .select('*')
            .order('created_at', { ascending: false });

        if (retrieveError) throw retrieveError;

        console.log(`‚úÖ ${allObjectives.length} objectif(s) r√©cup√©r√©(s):`);
        allObjectives.forEach((obj, index) => {
            console.log(`   ${index + 1}. ${obj.title}`);
            console.log(`      - Cat√©gorie: ${obj.category || 'Non d√©finie'}`);
            console.log(`      - Propri√©taire: ${obj.owner_name || 'Non d√©fini'}`);
            console.log(`      - √âquipe: ${JSON.stringify(obj.team_members || [])}`);
        });

        // Test 3: Supprimer l'objectif de test
        console.log("\n3Ô∏è‚É£ Suppression de l'objectif de test...");
        const { error: deleteError } = await supabase
            .from('objectives')
            .delete()
            .eq('id', createdObjective.id);

        if (deleteError) throw deleteError;

        console.log("‚úÖ Objectif supprim√© avec succ√®s");

        console.log("\nüéâ TEST FRONTEND R√âUSSI !");
        console.log("Les donn√©es sont correctement persist√©es et r√©cup√©r√©es.");

    } catch (error) {
        console.error(`‚ùå Erreur: ${error.message}`);
        console.error("D√©tails:", error);
    }
}

testGoalsFrontend();
