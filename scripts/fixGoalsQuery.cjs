const { createClient } = require('@supabase/supabase-js');
const { supabaseConfig } = require('../config/supabase.cjs');

const supabase = createClient(supabaseConfig.url, supabaseConfig.serviceRoleKey);

async function fixGoalsQuery() {
    console.log("üîß TEST SYNTAXE REQU√äTE GOALS");
    console.log("=============================\n");

    try {
        // R√©cup√©rer un utilisateur
        const { data: users, error: usersError } = await supabase
            .from('users')
            .select('id')
            .limit(1);

        if (usersError) throw usersError;
        if (users.length === 0) {
            console.error("‚ùå Aucun utilisateur trouv√©");
            return;
        }

        const userId = users[0].id;
        console.log(`‚úÖ Test avec utilisateur: ${userId}`);

        // Test 1: Syntaxe actuelle (qui √©choue)
        console.log("\n1Ô∏è‚É£ Test syntaxe actuelle...");
        try {
            const { data, error } = await supabase
                .from('objectives')
                .select('*')
                .or(`owner_id.eq.${userId},team_members.cs.{"${userId}"}`);
            
            if (error) {
                console.log("‚ùå Syntaxe actuelle √©choue:", error.message);
            } else {
                console.log("‚úÖ Syntaxe actuelle fonctionne:", data.length);
            }
        } catch (err) {
            console.log("‚ùå Erreur:", err.message);
        }

        // Test 2: Syntaxe alternative avec @>
        console.log("\n2Ô∏è‚É£ Test syntaxe alternative (@>)...");
        try {
            const { data, error } = await supabase
                .from('objectives')
                .select('*')
                .or(`owner_id.eq.${userId},team_members.@>.["${userId}"]`);
            
            if (error) {
                console.log("‚ùå Syntaxe @> √©choue:", error.message);
            } else {
                console.log("‚úÖ Syntaxe @> fonctionne:", data.length);
            }
        } catch (err) {
            console.log("‚ùå Erreur:", err.message);
        }

        // Test 3: Sans filtrage team_members
        console.log("\n3Ô∏è‚É£ Test sans filtrage team_members...");
        try {
            const { data, error } = await supabase
                .from('objectives')
                .select('*')
                .eq('owner_id', userId);
            
            if (error) {
                console.log("‚ùå Sans team_members √©choue:", error.message);
            } else {
                console.log("‚úÖ Sans team_members fonctionne:", data.length);
            }
        } catch (err) {
            console.log("‚ùå Erreur:", err.message);
        }

        // Test 4: R√©cup√©rer tous les objectifs et filtrer c√¥t√© client
        console.log("\n4Ô∏è‚É£ Test r√©cup√©ration compl√®te...");
        try {
            const { data, error } = await supabase
                .from('objectives')
                .select('*');
            
            if (error) {
                console.log("‚ùå R√©cup√©ration compl√®te √©choue:", error.message);
            } else {
                console.log("‚úÖ R√©cup√©ration compl√®te fonctionne:", data.length);
                
                // Filtrer c√¥t√© client
                const filtered = data.filter(obj => {
                    if (obj.owner_id === userId) return true;
                    if (obj.team_members && Array.isArray(obj.team_members)) {
                        return obj.team_members.includes(userId);
                    }
                    return false;
                });
                console.log(`‚úÖ Apr√®s filtrage c√¥t√© client: ${filtered.length}`);
            }
        } catch (err) {
            console.log("‚ùå Erreur:", err.message);
        }

    } catch (error) {
        console.error("‚ùå Erreur inattendue:", error.message || error);
    }
}

fixGoalsQuery();

