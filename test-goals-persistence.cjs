const { createClient } = require('@supabase/supabase-js');

const supabaseConfig = {
  url: 'https://nigfrebfpkeoreaaiqzu.supabase.co',
  anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pZ2ZyZWJmcGtlb3JlYWFpcXp1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA2NjIzMDYsImV4cCI6MjA3NjIzODMwNn0.-_jcUhUeifEACMHl2SAErb7lAfzOVHzD7QGtAxFsgQk'
};

const supabase = createClient(supabaseConfig.url, supabaseConfig.anonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  }
});

async function testGoalsPersistence() {
  console.log('üéØ TEST DE PERSISTANCE - MODULE GOALS');
  console.log('====================================');

  try {
    // Test 1: Connexion utilisateur
    console.log('\n1Ô∏è‚É£ Connexion utilisateur...');
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'rokhaya@senegel.org',
      password: 'Senegel2024!'
    });

    if (authError) {
      console.error('‚ùå Erreur de connexion:', authError.message);
      return;
    }

    console.log('‚úÖ Connexion r√©ussie:', authData.user.email);
    console.log('üÜî User ID:', authData.user.id);

    // Test 2: V√©rifier les objectifs existants
    console.log('\n2Ô∏è‚É£ V√©rification des objectifs existants...');
    const { data: existingObjectives, error: objectivesError } = await supabase
      .from('objectives')
      .select('*')
      .order('created_at', { ascending: false });

    if (objectivesError) {
      console.error('‚ùå Erreur lecture objectifs:', objectivesError.message);
    } else {
      console.log(`‚úÖ ${existingObjectives.length} objectifs trouv√©s`);
      existingObjectives.forEach(o => {
        console.log(`   - ${o.title} (owner: ${o.owner_id}, status: ${o.status})`);
      });
    }

    // Test 3: Cr√©ation d'un nouvel objectif avec owner_id correct
    console.log('\n3Ô∏è‚É£ Cr√©ation d\'un nouvel objectif...');
    const newObjectiveData = {
      title: 'TEST PERSISTANCE GOALS',
      description: 'Objectif de test pour v√©rifier la persistance avec owner_id correct',
      status: 'In Progress',
      priority: 'High',
      owner_id: authData.user.id, // IMPORTANT: owner_id correct
      start_date: new Date().toISOString().split('T')[0],
      end_date: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      progress: 25,
      category: 'Test',
      quarter: 'Q4',
      year: new Date().getFullYear(),
      team_members: []
    };

    const { data: newObjective, error: createError } = await supabase
      .from('objectives')
      .insert([newObjectiveData])
      .select()
      .single();

    if (createError) {
      console.error('‚ùå Erreur cr√©ation objectif:', createError.message);
      console.error('   - Code:', createError.code);
      console.error('   - Details:', createError.details);
    } else {
      console.log('‚úÖ Objectif cr√©√©:', newObjective.id);
      console.log('   - Titre:', newObjective.title);
      console.log('   - Owner:', newObjective.owner_id);
      console.log('   - Status:', newObjective.status);
    }

    // Test 4: V√©rifier que l'objectif est visible
    console.log('\n4Ô∏è‚É£ V√©rification de la visibilit√© de l\'objectif cr√©√©...');
    const { data: updatedObjectives, error: readError } = await supabase
      .from('objectives')
      .select('*')
      .eq('id', newObjective.id);

    if (readError) {
      console.error('‚ùå Erreur lecture objectif:', readError.message);
    } else {
      console.log(`‚úÖ Objectif visible: ${updatedObjectives.length > 0 ? 'OUI' : 'NON'}`);
      if (updatedObjectives.length > 0) {
        console.log('   - Objectif trouv√©:', updatedObjectives[0].title);
      }
    }

    // Test 5: Test de mise √† jour de l'objectif
    console.log('\n5Ô∏è‚É£ Test de mise √† jour de l\'objectif...');
    const { data: updateResult, error: updateError } = await supabase
      .from('objectives')
      .update({ 
        description: 'Description mise √† jour - Test persistance Goals',
        progress: 50
      })
      .eq('id', newObjective.id)
      .select()
      .single();

    if (updateError) {
      console.error('‚ùå Erreur mise √† jour objectif:', updateError.message);
    } else {
      console.log('‚úÖ Objectif mis √† jour:', updateResult.id);
      console.log('   - Description:', updateResult.description);
      console.log('   - Progress:', updateResult.progress);
    }

    // Test 6: Test de suppression de l'objectif
    console.log('\n6Ô∏è‚É£ Test de suppression de l\'objectif...');
    const { error: deleteError } = await supabase
      .from('objectives')
      .delete()
      .eq('id', newObjective.id);

    if (deleteError) {
      console.error('‚ùå Erreur suppression objectif:', deleteError.message);
    } else {
      console.log('‚úÖ Objectif supprim√© avec succ√®s');
    }

    // Test 7: V√©rifier que l'objectif a √©t√© supprim√©
    console.log('\n7Ô∏è‚É£ V√©rification de la suppression...');
    const { data: deletedObjective, error: checkError } = await supabase
      .from('objectives')
      .select('*')
      .eq('id', newObjective.id);

    if (checkError) {
      console.error('‚ùå Erreur v√©rification suppression:', checkError.message);
    } else {
      console.log(`‚úÖ Objectif supprim√©: ${deletedObjective.length === 0 ? 'OUI' : 'NON'}`);
    }

    // Test 8: Test d'isolation avec un autre utilisateur
    console.log('\n8Ô∏è‚É£ Test d\'isolation avec un autre utilisateur...');
    await supabase.auth.signOut();
    
    const { data: authData2, error: authError2 } = await supabase.auth.signInWithPassword({
      email: 'nabyaminatoul08@gmail.com',
      password: 'Senegel2024!'
    });

    if (authError2) {
      console.error('‚ùå Erreur connexion utilisateur 2:', authError2.message);
    } else {
      console.log('‚úÖ Connexion utilisateur 2 r√©ussie:', authData2.user.email);
      
      const { data: objectives2, error: objectivesError2 } = await supabase
        .from('objectives')
        .select('*')
        .order('created_at', { ascending: false });

      if (objectivesError2) {
        console.error('‚ùå Erreur lecture objectifs utilisateur 2:', objectivesError2.message);
      } else {
        console.log(`‚úÖ ${objectives2.length} objectifs visibles pour l'utilisateur 2`);
        const ownObjectives = objectives2.filter(o => o.owner_id === authData2.user.id);
        const otherObjectives = objectives2.filter(o => o.owner_id !== authData2.user.id);
        
        console.log(`   - Objectifs propres: ${ownObjectives.length}`);
        console.log(`   - Objectifs d'autres: ${otherObjectives.length}`);
        
        if (otherObjectives.length > 0) {
          console.log('‚ùå PROBL√àME D\'ISOLATION D√âTECT√â !');
          otherObjectives.forEach(o => {
            console.log(`   - Objectif d'autrui visible: ${o.title} (owner: ${o.owner_id})`);
          });
        } else {
          console.log('‚úÖ ISOLATION PARFAITE !');
        }
      }
    }

    console.log('\nüéâ TEST DE PERSISTANCE GOALS TERMIN√â !');
    console.log('‚úÖ Cr√©ation: Objectif cr√©√© avec owner_id correct');
    console.log('‚úÖ Lecture: Objectif visible apr√®s cr√©ation');
    console.log('‚úÖ Mise √† jour: Objectif modifi√© avec succ√®s');
    console.log('‚úÖ Suppression: Objectif supprim√© avec succ√®s');
    console.log('‚úÖ Isolation: Chaque utilisateur ne voit que ses objectifs');
    console.log('‚úÖ Persistance: Toutes les op√©rations CRUD fonctionnent');

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error.message);
  } finally {
    // D√©connexion
    await supabase.auth.signOut();
    console.log('\nüîö D√©connexion effectu√©e');
  }
}

testGoalsPersistence();
